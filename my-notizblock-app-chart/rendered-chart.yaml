---
# Source: my-notizblock-app-chart/charts/database/templates/primary/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: my-app-release-database
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-app-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: database
    app.kubernetes.io/version: 17.5.0
    helm.sh/chart: database-16.7.8
    app.kubernetes.io/component: primary
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: my-app-release
      app.kubernetes.io/name: database
      app.kubernetes.io/component: primary
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    - ports:
        - port: 5432
---
# Source: my-notizblock-app-chart/charts/database/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: my-app-release-database
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-app-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: database
    app.kubernetes.io/version: 17.5.0
    helm.sh/chart: database-16.7.8
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-app-release
      app.kubernetes.io/name: database
      app.kubernetes.io/component: primary
---
# Source: my-notizblock-app-chart/charts/database/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-app-release-database
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-app-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: database
    app.kubernetes.io/version: 17.5.0
    helm.sh/chart: database-16.7.8
automountServiceAccountToken: false
---
# Source: my-notizblock-app-chart/charts/database/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-app-release-database
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-app-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: database
    app.kubernetes.io/version: 17.5.0
    helm.sh/chart: database-16.7.8
type: Opaque
data:
  postgres-password: "SzdHcDhydTRhcA=="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: my-notizblock-app-chart/templates/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: my-app-release-my-notizblock-app-chart-db-secret
  labels:
    app: my-app-release-my-notizblock-app-chart
type: Opaque
data:
  username: bXl1c2Vy
  password: bXlwYXNzd29yZA==
---
# Source: my-notizblock-app-chart/templates/app-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-app-release-my-notizblock-app-chart-config
data:
  BACKEND_URL: "http://my-app-release-backend:3000"
---
# Source: my-notizblock-app-chart/charts/database/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-app-release-database-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-app-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: database
    app.kubernetes.io/version: 17.5.0
    helm.sh/chart: database-16.7.8
    app.kubernetes.io/component: primary
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/instance: my-app-release
    app.kubernetes.io/name: database
    app.kubernetes.io/component: primary
---
# Source: my-notizblock-app-chart/charts/database/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-app-release-database
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-app-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: database
    app.kubernetes.io/version: 17.5.0
    helm.sh/chart: database-16.7.8
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/instance: my-app-release
    app.kubernetes.io/name: database
    app.kubernetes.io/component: primary
---
# Source: my-notizblock-app-chart/templates/backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-app-release-my-notizblock-app-chart-backend
  labels:
    app: my-app-release-my-notizblock-app-chart-backend
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    app: my-app-release-my-notizblock-app-chart-backend
---
# Source: my-notizblock-app-chart/templates/database-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-app-release-database
  labels:
    app: my-app-release-database
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: my-app-release-database
---
# Source: my-notizblock-app-chart/templates/frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: my-app-release-frontend
  labels:
    app: my-app-release-frontend
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: my-app-release-frontend
---
# Source: my-notizblock-app-chart/templates/backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-release-my-notizblock-app-chart-backend
  labels:
    app: my-app-release-my-notizblock-app-chart-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-app-release-my-notizblock-app-chart-backend
  template:
    metadata:
      labels:
        app: my-app-release-my-notizblock-app-chart-backend
    spec:
      containers:
      - name: backend
        image: masterkey75/backend:latest
        env:
        - name: DB_HOST
          value: my-app-release-database # Subchart-Service-Name
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: my-app-release-my-notizblock-app-chart-db-secret
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-app-release-my-notizblock-app-chart-db-secret
              key: password
        - name: DB_NAME
          value: mydatabase
        ports:
        - containerPort: 3000
---
# Source: my-notizblock-app-chart/templates/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-release-my-notizblock-app-chart-frontend
  labels:
    app: my-app-release-my-notizblock-app-chart-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-app-release-my-notizblock-app-chart-frontend
  template:
    metadata:
      labels:
        app: my-app-release-my-notizblock-app-chart-frontend
    spec:
      containers:
      - name: frontend
        image: masterkey75/frontend:latest
        ports:
        - containerPort: 80
---
# Source: my-notizblock-app-chart/charts/database/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-app-release-database
  namespace: "default"
  labels:
    app.kubernetes.io/instance: my-app-release
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: database
    app.kubernetes.io/version: 17.5.0
    helm.sh/chart: database-16.7.8
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: my-app-release-database-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: my-app-release
      app.kubernetes.io/name: database
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: my-app-release-database
      labels:
        app.kubernetes.io/instance: my-app-release
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: database
        app.kubernetes.io/version: 17.5.0
        helm.sh/chart: database-16.7.8
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: my-app-release-database
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: my-app-release
                    app.kubernetes.io/name: database
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:17.5.0-debian-12-r8
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_PASSWORD_FILE
              value: /opt/bitnami/postgresql/secrets/postgres-password
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/postgresql/tmp
              subPath: app-tmp-dir
            - name: postgresql-password
              mountPath: /opt/bitnami/postgresql/secrets/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: postgresql-password
          secret:
            secretName: my-app-release-database
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: my-notizblock-app-chart/templates/frontend-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app-release-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: my-app.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app-release-frontend
            port:
              number: 80
